# -*- coding:Utf-8 -*-

# Steps to make this mod manager working :
# - launch the game once with this option « PROTON_DUMP_DEBUG_COMMANDS=1 %command% » --> can't add the command
#                                                                                               option : must be made by
#                                                                                               user
# - detect and save somewhere the .run file created
# - modify this log file by adding the mod option
# - run the modified
import subprocess
from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter.ttk import *
import os.path


class InterfaceV2MM(object):
    def __init__(self):
        self.root = Tk()
        self.root.title('Victoria 2 Mod Manager (linux)')

        # STEAM FRAME
        steam_frame = LabelFrame(self.root, text="INSTALLATION")
        steam_frame.grid(column=0, row=0)

        #       STEAM LAUNCHER
        self.steam_launch_label = Label(steam_frame, text="First, launch steam.").grid(column=0, row=0, sticky='W')
        self.steam_launcher_button = Button(steam_frame, text="Launch Steam", command=self.launch_steam, width=15) \
            .grid(column=0, row=1, pady=(0, 0), sticky='W')
        #       ADD LAUNCH OPTION
        self.file_label = Label(
            steam_frame,
            text="Now add the text below as a launch option (you can remove it later).")\
            .grid(column=0, row=2, sticky='W')
        self.launch_option = Entry(steam_frame, width=10)
        self.launch_option.grid(row=3, sticky='ew')
        self.launch_option.insert(0, 'PROTON_DUMP_DEBUG_COMMANDS=1 %command%')
        #       CHECK PROTON VERSION
        self.proton_version_label = Label(
            steam_frame,
            text="At the same place, check that you force the SteamPlay Compatibility and choose the version « PROTON 4.11-13 ».") \
            .grid(column=0, row=4, sticky='W')
        #       LAUNCH VICTORIA 2 ONCE
        self.launch_victoria = Label(steam_frame, text="Launch Victoria 2.").grid(column=0, row=14, sticky='W')
        self.steam_launcher_button = Button(steam_frame, text="Launch Victoria 2", command=self.launch_victoria2) \
            .grid(column=0, row=15, pady=(0, 0), sticky='W')
        #       COLLECT YOUR DATA
        self.grab_data = Label(steam_frame, text="Collect your game data").grid(column=0, row=16, sticky='W')
        self.grab_data_button = Button(steam_frame, text="Save your data", command=self.grab_game_data) \
            .grid(column=0, row=17, pady=(0, 0), sticky='W')


        # GAME FRAME
        mod_list_frame = LabelFrame(self.root, text="MOD LIST")
        mod_list_frame.grid(column=0, row=1)
        #       LIST OF MODS FOUNT
        self.mod_list_label = Label(mod_list_frame, text="Mods fount in your steam files.").grid(column=0, row=1, sticky='W')
        self.mod_list = Listbox(mod_list_frame)
        self.mod_list.grid(column=0, row=2, sticky='W')
        for mod in self.get_list_of_mods(os.path.expanduser("~") + '/.v2mm/run'):
            self.mod_list.insert(END, mod)
        #       LAUNCH MOD BUTTON
        Button(mod_list_frame, text='Launch selected mod', command=self.launch_game_with_selected_mod).grid(column=1, row=2)

        # LOGS OF THE MOD MANAGER
        # TODO

        # END BUTTONS FRAME
        end_button_frame = LabelFrame(self.root)
        end_button_frame.grid(column=0, row=2)
        Button(end_button_frame, text='Leave', command=self.root.quit).grid(row=0, column=0)

    def launch_game_with_selected_mod(self):
        print('mod launched')

    def get_list_of_mods(self, runfile_location):
        mod_list = []
        # We need to extract the game directory which is within the file. It is the line starting by « cd " ».
        game_directory = self.extract_game_directory_from_proton_runfile(runfile_location)
        for item in os.listdir(game_directory + "/mod/"):
            if os.path.isfile(game_directory + "/mod/" + item):  # Is it a file ?
                # And is its extension « .mod » ?
                if item.endswith('.mod'):
                    mod_list.append(item)
        return mod_list

    @staticmethod
    def extract_game_directory_from_proton_runfile(runfile_location):
        """
        Extracts the game main directory using the data from the run file generated by PROTON.
        :param runfile_location: The location of the run file generated by PROTON.
        :return:
        """
        file_opener = open(runfile_location, 'r')
        executable_content = file_opener.readlines()
        for line in executable_content:
            if line.startswith('cd "'):
                return line[4:-2]
        return False

    def grab_game_data(self):
        """
        Collects Proton's debug log and saves them somewhere.
        :return:
        """

        # The files are - most of the time - stored in a temporary folder.
        # The common location is /tmp/proton_UNIX-USERNAME .
        # One log file is enough for the mod manager : /tmp/proton_UNIX-USERNAME/run

        # Get the file location
        home_directory = os.path.expanduser("~")
        username = os.path.basename(home_directory)
        # So, the file we want is...
        path_to_run_exe = '/tmp/proton_' + username + '/run'
        # We want to copy it somewhere. ~/v2mm/run might be a good place.
        file_source = open(path_to_run_exe, 'r')
        if not os.path.exists(home_directory + '/.v2mm/'):  # Creates the directory if it does not exist.
            os.mkdir(home_directory + '/.v2mm/')
        file_destination = open(home_directory + '/.v2mm/run', 'w')
        file_destination.write(file_source.read())
        file_source.close()
        file_destination.close()

    def launch_steam(self):
        subprocess.run('steam &', shell=True, check=True, executable='/bin/sh')

    def launch_victoria2(self):
        subprocess.run('steam steam://rungameid/42960 &', shell=True, check=True, executable='/bin/sh')



if __name__ == '__main__':
    if len(sys.argv) == 1:
        # Just launch the mainloop.
        myInterface = InterfaceV2MM()
        myInterface.root.mainloop()
        exit()
    else:
        print('Hello, you somehow mislaunched the mod manager. Use this command instead :')
        print('python3 VMM.py')
        exit()

